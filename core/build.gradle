plugins {
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id 'com.palantir.git-version'
}

repositories {
  mavenLocal()
  mavenCentral()
}

group = 'com.needhamsoftware.unojar'
version = '2.0.0-SNAPSHOT'
ext.shortDesc = 'Uno-Jar Core'
description = 'Libraries for packaging FatJars with a JarClassLoader'

configurations.configureEach {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
  testImplementation 'com.needhamsoftware:easier-mock:2.0'
  testImplementation 'junit:junit:4.13.1'
}

jar {
  from('../') {
    include 'LICENSE.txt'
    include 'NOTICE.txt'
  }
}

tasks.register('versionTxt') {
  doLast {
    def file = new File(projectDir, "/src/main/resources/")
    file.mkdirs()
    file = new File(file, ".version")
    file.createNewFile()
    file.text = "$version"
  }
}

classes.dependsOn(versionTxt)

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  from sourceSets.main.allSource
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  from javadoc.destinationDir
  archiveClassifier = "javadoc"
}

tasks.register('updateLoggerTestJar', Copy) {
  from "../examples/build/libs/uno-jar-examples-unojar.jar"
  into "src/test/resources"
}

processTestResources.mustRunAfter(updateLoggerTestJar)

test {
  dependsOn(updateLoggerTestJar)
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  def gitDetails = versionDetails()
  return [
  'Implementation-Version': version,
  'Build-Tool': "Gradle ${gradle.gradleVersion}",
  'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
  'Created-By': "Gradle ${gradle.gradleVersion}",
  'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
  'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
  'Multi-Release' : 'true'
  ]
}

apply from: file('../gradle/publishing/publishing.gradle')
