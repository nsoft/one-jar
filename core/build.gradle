plugins {
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id 'com.palantir.git-version'
}

repositories {
  mavenLocal()
  mavenCentral()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}

group = 'com.needhamsoftware.unojar'
version = '2.0.0-SNAPSHOT'
ext.shortDesc = 'Uno-Jar Core'
description = 'Libraries for packaging FatJars with a JarClassLoader'


configurations.configureEach {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceSets {
  java9 {
    java {
      srcDirs = ['src/main/java9']
    }
  }

  java11 {
    java {
      srcDirs = ['src/main/java11']
    }
  }
}

compileJava {
  sourceCompatibility = 8
  targetCompatibility = 8
}

compileJava9Java {
  sourceCompatibility = 9
  targetCompatibility = 9
}

compileJava11Java {
  sourceCompatibility = 11
  targetCompatibility = 11
}

tasks.named('compileJava11Java') {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

tasks.named('compileJava9Java') {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(9)
  }
}


tasks.named('compileJava') {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
  }
}
dependencies {
  testImplementation 'com.needhamsoftware:easier-mock:2.0'
  testImplementation 'junit:junit:4.13.1'
  java9Implementation files(sourceSets.main.output.classesDirs) {
    builtBy compileJava
  }
  java11Implementation files(sourceSets.main.output.classesDirs) {
    builtBy compileJava
  }
  java11Implementation files(sourceSets.java9.output.classesDirs) {
    builtBy compileJava9Java
  }
}

jar {
  from('../') {
    include 'LICENSE.txt'
    include 'NOTICE.txt'
  }

  into('META-INF/versions/9') {
    from sourceSets.java9.output
  }
  into('META-INF/versions/11') {
    from sourceSets.java11.output
  }
}

tasks.register('versionTxt') {
  doLast {
    def file = new File(projectDir, "/src/main/resources/")
    file.mkdirs()
    file = new File(file, ".version")
    file.createNewFile()
    file.text = "$version"
  }
}

classes.dependsOn(versionTxt)

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  from sourceSets.main.allSource
  from sourceSets.java9.allSource
  from sourceSets.java11.allSource
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  from javadoc.destinationDir
  archiveClassifier = "javadoc"
}

tasks.register('updateLoggerTestJar', Copy) {
  from "../examples/build/libs/uno-jar-examples-unojar.jar"
  into "src/test/resources"
}

processTestResources.mustRunAfter(updateLoggerTestJar)

test {
  def jdk8 = System.getProperty("unojar.jdk.8")
  def jdk11 = System.getProperty("unojar.jdk.11")
  dependsOn(updateLoggerTestJar)
  systemProperties(["unojar.jdk.8":jdk8,"unojar.jdk.11":jdk11])
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  def gitDetails = versionDetails()
  return [
  'Implementation-Version': version,
  'Build-Tool': "Gradle ${gradle.gradleVersion}",
  'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
  'Created-By': "Gradle ${gradle.gradleVersion}",
  'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
  'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
  'Multi-Release' : 'true'
  ]
}

apply from: file('../gradle/publishing/publishing.gradle')
