plugins {
  id 'java'
  id 'signing'
  id 'maven-publish'
  id 'com.palantir.git-version'
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}

group = 'com.needhamsoftware.unojar'
version = '2.0.0-SNAPSHOT'
ext.shortDesc = 'Uno-Jar Ant Task'
description = 'Ant Task for packaging FatJars with a JarClassLoader'

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation 'com.needhamsoftware.unojar:core:' + project.version
  implementation 'org.apache.ant:ant:1.10.14'
}

javadoc {
  dependsOn 'copyCore', 'copyCoreJar'
}

task copyCore(type: Copy) {
  dependsOn ':core:jar'
  from '' + projectDir + "/../core/build/libs/core-" + project.version + ".jar"
  into '' + projectDir + "/build"
  rename("core-" + project.version + ".jar", "core.jar")
}

jar {
  dependsOn copyCore
  def gitDetails = versionDetails()
  manifest {
    attributes(
        'Implementation-Version': archiveVersion,
        'Build-Tool': "Gradle ${gradle.gradleVersion}",
        'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
        'Created-By': "Gradle ${gradle.gradleVersion}",
        'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}


task sourcesJar(type: Jar, dependsOn: classes) {
  dependsOn 'copyCoreJar'
  mustRunAfter "classes"
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
  archiveFileName = 'ant-'+project.version+'-sources.jar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  dependsOn 'copyCoreJar'
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
  archiveFileName = 'ant-'+project.version+'-javadoc.jar'
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  def gitDetails = versionDetails()
  return [
      'Implementation-Version': version,
      'Build-Tool': "Gradle ${gradle.gradleVersion}",
      'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"]
}

task copyCoreJar(type: Copy) {
  dependsOn copyCore
  from '' + projectDir + "/build/core.jar"
  into '' + projectDir + "/build/classes/java/main/com/needhamsoftware/unojar/ant"
}

jar.dependsOn(copyCoreJar)

configurations {
  antjar
}

artifacts {
  antjar jar
}

compileJava.dependsOn ':core:publishToMavenLocal'

apply from: file('../gradle/publishing/publishing.gradle')